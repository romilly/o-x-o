chapter-1.ipynb:    "We'll use APL's `rank` operator `⍤` which we can use to control how the code is applied to the function's argument."
chapter-1.ipynb:    "`3 3⍴⍤ 1` allows us to do that.\n",
chapter-1.ipynb:    "show ← {3 3⍴⍤ 1 ⊢'.×○'[⍵]}\n",
chapter-1.ipynb:    "⊂⍤2 show encode ⍳6"
chapter-1.ipynb:    "The expression `⊂⍤2` converts the cube (or 3D array) of characters returned by `show` into a vector (a 1D array or list) of matrices (2D arrays).\n",
chapter-1.ipynb:    "*Rank* `⍤` was described above."
chapter-1.ipynb:    "In the discussion that follows, we'll use the expression `⊂⍤2 show` a lot, so let's make it a function."
chapter-1.ipynb:    "list ← {⊂⍤2 show ⍵}\n",
chapter-3.ipynb:    "see←{{,'.×○'⍳⍵}⍤2⊣⍵}"
chapter-3.ipynb:    "⊂⍤2 show ∪less[symmetries]"
chapter-3.ipynb:    "⊂⍤2 show ∪board1[symmetries]"
chapter-6.ipynb:    "[^exceptRank]: As you may remember, rank `⍤` takes a function o n its left a numeric argument on its right."
