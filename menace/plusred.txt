chapter-3.ipynb:    "+/1 2 ∘.= v"
chapter-3.ipynb:    "`+/` is a *plus reduction*. It sums the values along the first dimension of n array.\n",
chapter-3.ipynb:    "-/+/1 2 ∘.= v"
chapter-3.ipynb:    "cd ← {-/+/1 2 ∘.=⍵} \n",
chapter-3.ipynb:    "ok←{0 1∊⍨-⌿+/1 2∘.=⍵}      ⍝ do positions have counts of × and ○ that could occur in play?\n",
chapter-3.ipynb:    "cd ← {-⌿+/1 2 ∘.=⍵}\n",
chapter-3.ipynb:    "⍴mn ← +/ucp≠0"
chapter-4.ipynb:    "+/wf ucp"
chapter-5.ipynb:    "How many blank cells are there? That's just a *plus reduction* written `+/`"
chapter-5.ipynb:    "+/blanks"
chapter-5.ipynb:    "⊢1 0⍕1+⍳+/blanks"
chapter-5.ipynb:    "bv[⍸0=pos4] ← 1 0⍕1+⍳+/0=pos4\n",
chapter-5.ipynb:    "moves ← {blanks ← 0=⍵ ⋄ bv ← ,show ⍵ ⋄ bv[⍸blanks] ← 1 0⍕1+⍳+/blanks ⋄ 3 3⍴bv }\n",
chapter-6.ipynb:    "⊢c ← +/e ⍝ how many empty squares are there? (At the start of the game, all of them)."
chapter-6.ipynb:    "np ← {1+>/+/1 2∘.=⍵} ⍝ who is the next player? 1 for ×, 2 for ○\n",
chapter-6.ipynb:    "cp[i[?+/e]] ← np cp\n",
chapter-6.ipynb:      "random_player[3] cp[i[?+/e]]←np cp\n",
chapter-6.ipynb:    " draw ← {0=+/0=⍵} ⍝ is the game drawn?\n",
chapter-6.ipynb:    "empty_count ← { +/0=cpos ⍵ }\n",
chapter-7.ipynb:    "ok←{0 1∊⍨-⌿+/1 2∘.=⍵}      ⍝ do positions have counts of × and ○ that could occur in play?\n",
chapter-7.ipynb:    "pick ← {(0,+\\⍵)⍸?+/⍵}"
chapter-7.ipynb:    "The code below creates a 100,000 element vector in which each element is the enclosed character vector `pick beads`. It then uses *execute each* `⍎¨` to execute each of those statements. It uses *outer product equals* `∘.=` to create a table with a 1 for each occurrence of the nine possible values, and adds up each row using *plus reduction* `+/`. That gives a count of hom many times each possible value was chosen.\n",
chapter-7.ipynb:    "counts ← +/(⍳9)∘.= picks\n",
chapter-7.ipynb:    "counts÷+/counts"
chapter-7.ipynb:    "adjustment ← { draw ⍵: 1 ⋄ ¯3 3[2|+/0≠⍵] }\n",
chapter-7.ipynb:    "who ← {'○×'[2|+/0≠⍵]}\n",
